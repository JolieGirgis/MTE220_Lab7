#include "mte220.c"  // C functions needed for labs
#include <math16.h>

int percent_L = 0;
int percent_R = 0;
int final_percent_L = 0;
int final_percent_R = 0;

uns16 ServoSpeedL(int percent){
    uns16 slope = (SERVO_LEFT_STOP-SERVO_1MS) / 100;
    return (uns16)(SERVO_LEFT_STOP - slope*percent);
}

uns16 ServoSpeedR(int percent){
    uns16 slope = (SERVO_2MS-SERVO_RIGHT_STOP) / 100;
    return (uns16)((slope*percent) + SERVO_RIGHT_STOP);
}

void LED_Blink(int time){
	int i = 0;
	while(i < time){
		OnLED
		LongDelay(3.5);
		OffLED
		LongDelay(3.5);
		i++;
	}
}

void LED_on(int time){
	OnLED
	LongDelay(time);
	OffLED
}

/*void DecreaseSpeedL(int init_percent, int final_percent){
	int i = init_percent; // Speed percent motor currently is at
	for(i; i >= final_percent; i--){
		SetLeft(ServoSpeedL(i));
		LongDelay(0.1);
	}
}*/

/*void IncreaseSpeedL(int init_percent, int final_percent){
	int i = init_percent;
	for(i; i <= final_percent; i++){
		SetLeft(ServoSpeedL(i));
		LongDelay(0.1);
	}
}*/

void DecreaseSpeed(int init_percent, int final_percent, char side){
	// Speed percent motor is currently  at
	int i = init_percent; 
	// Decrementing speed percent every 0.0143 second until it reaches final_percent
	for(i; i >= final_percent; i--){
		if (side == 'R'){
			SetRight(ServoSpeedR(i));
		}
		else if (side == 'L'){
			SetLeft(ServoSpeedL(i));
		}
		LongDelay(0.1);
	}
}

void IncreaseSpeed(int init_percent, int final_percent, char side){
	// Speed percent motor is currently  at
	int i = init_percent;
	// Incrementing speed percent every 0.0143 second until it reaches final_percent
	for(i; i <= final_percent; i++){
		if(side == 'R'){
			SetRight(ServoSpeedR(i));

		}
		else if(side == 'L'){
			SetLeft(ServoSpeedL(i));
		}
		LongDelay(0.1);
	}
}

void main(void)
{
    uns8 analog_value_s;
    uns8 analog_value_h;
    Initialization();

    // initially both servos are on
    UseServos         // (syntax of "call" is correct without () or ;)

    while (1)  // loop forever
    {
    	WaitForButton();
    	
    	analog_value_h = AnalogConvert(ADC_HALL_EFFECT);  // Get analog value from the Hall effect sensor
		
        analog_value_s = AnalogConvert(ADC_IR_SENSOR);  // get analog value from IR sensor diff amp
        

    	if ( analog_value_s < 0x66 )  // 0x66 is 2V for 10-bit ADC with 2 LSB dropped
    	{
        	// Turn Right
        	//SetLeft(ServoSpeedL(100));
        	//SetRight(ServoSpeedR(0));
        	
        	final_percent_L = 100; // percent to increase left motor to
	    	final_percent_R = 0; // percent to decrease right motor to
        	IncreaseSpeed(percent_L,final_percent_L,'L');
        	DcreaseSpeed(percent_R,final_percent_R,'R');
        	percent_L = 100; // updating the current percent of left motor
        	percent_R = 0; // updating the current percent of right motor
        	
        }
        else if ( analog_value_s > 0x99 )  // 0x99 is 3V for 10-bit ADC with 2 LSB dropped
        {
          // Turn left
          //SetLeft(ServoSpeedL(0));
          //SetRight(ServoSpeedR(100));
	    	
          final_percent_L = 0; // percent to decrease left motor to
          final_percent_R = 100; // percent to increase right motor to
          IncreaseSpeed(percent_R,final_percent_R,'R');
          DecreaseSpeed(percent_L,final_percent_L,'L');
          percent_L = final_percent_L; // updating the current percent of left motor
          percent_R = final_percent_R; // updating the current percent of right motor
        }
      else
      {
        // Both servos on
        // BothServosOn
        final_percent_L = 100; // percent to increase left motor to
        final_percent_R = 100; // percent to increase right motor to
        IncreaseSpeed(percent_L,final_percent_L,'L');
        IncreaseSpeed(percent_R,final_percent_R,'R');
        percent_L = final_percent_L; // updating the current percent of left motor
        percent_R = final_percent_R; // updating the current percent of right motor
       }	   
    }
}

